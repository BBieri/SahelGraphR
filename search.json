[{"path":"https://bbieri.github.io/SahelGraphR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 SahelGraphR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/articles/SahelMaps.html","id":"setting-things-up","dir":"Articles","previous_headings":"","what":"Setting things up:","title":"Create Sahel Maps","text":"vignette describes workflow easily create maps project SahelGraphR. starting, need load packages required download data. done, proceed use get_shapefiles() function package download shapefiles desired countries desired level. Note Mauritania’s shapefiles availiable level 2 3. Now downloads successfully completed, can start plotting maps. start series individual plots patchwork plot.     Finally, move merge shapefiles previously consistently named plot regional map. Make sure use projections !","code":"library(SahelGraphR) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.2     ✔ readr     2.1.4 #> ✔ forcats   1.0.0     ✔ stringr   1.5.0 #> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0 #> ✔ purrr     1.0.1      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(patchwork) (SEN <- get_shapefiles(country_code = \"SEN\", level = 2) |>     dplyr::rename(ADM2_NAME = ADM2_FR) |>     dplyr::select(ADM2_NAME, geometry)) #> Departement Level Selected #> Simple feature collection with 45 features and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -17.53092 ymin: 12.30777 xmax: -11.34801 ymax: 16.69373 #> Geodetic CRS:  WGS 84 #> # A tibble: 45 × 2 #>    ADM2_NAME                                                            geometry #>    <chr>                                                      <MULTIPOLYGON [°]> #>  1 Bakel       (((-12.66549 15.11117, -12.66378 15.11113, -12.66217 15.11114, -… #>  2 Bambey      (((-16.41398 15.02491, -16.40452 15.02327, -16.39624 15.02347, -… #>  3 Bignona     (((-15.89499 13.16475, -15.89556 13.16277, -15.89629 13.16206, -… #>  4 Birkelane   (((-15.59026 14.11543, -15.58989 14.11477, -15.58866 14.11133, -… #>  5 Bounkiling  (((-15.49857 13.39529, -15.49636 13.395, -15.49446 13.39515, -15… #>  6 Dagana      (((-15.41078 16.53676, -15.40685 16.53634, -15.40398 16.53667, -… #>  7 Dakar       (((-17.39918 14.6713, -17.39911 14.67127, -17.39909 14.67123, -1… #>  8 Diourbel    (((-16.22843 14.95423, -16.22363 14.95312, -16.21434 14.95332, -… #>  9 Fatick      (((-16.49001 14.59536, -16.48651 14.59284, -16.48172 14.5933, -1… #> 10 Foundiougne (((-16.39603 14.14731, -16.39401 14.14674, -16.39217 14.14686, -… #> # ℹ 35 more rows (BFA <- get_shapefiles(country_code = \"BFA\", level = 2) |>     dplyr::rename(ADM2_NAME = adm2_name1) |>     dplyr::select(ADM2_NAME, geometry)) #> Departement Level Selected #> Simple feature collection with 45 features and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -5.513242 ymin: 9.410472 xmax: 2.40501 ymax: 15.08304 #> Geodetic CRS:  WGS 84 #> # A tibble: 45 × 2 #>    ADM2_NAME                                                            geometry #>    <chr>                                                      <MULTIPOLYGON [°]> #>  1 Kadiogo   (((-1.216611 12.33167, -1.215898 12.33139, -1.215505 12.33139, -1.… #>  2 Balé      (((-2.705114 11.60608, -2.70495 11.60584, -2.704798 11.60572, -2.7… #>  3 Banwa     (((-4.631655 12.05736, -4.631655 12.05736, -4.630345 12.05716, -4.… #>  4 Kossi     (((-4.232666 12.72638, -4.23253 12.72673, -4.23257 12.72711, -4.23… #>  5 Mouhoun   (((-3.495215 11.98364, -3.495108 11.98349, -3.495001 11.98335, -3.… #>  6 Nayala    (((-2.769197 12.61879, -2.769364 12.61845, -2.769412 12.61835, -2.… #>  7 Sourou    (((-3.440457 13.1593, -3.44041 13.15933, -3.43884 13.16069, -3.437… #>  8 Comoé     (((-3.969175 9.87328, -3.970301 9.871402, -3.970316 9.871277, -3.9… #>  9 Léraba    (((-5.115375 10.29121, -5.115273 10.29127, -5.114962 10.29158, -5.… #> 10 Boulgou   (((-0.108402 11.13307, -0.1167685 11.13473, -0.1251351 11.1364, -0… #> # ℹ 35 more rows (NER <- get_shapefiles(country_code = \"NER\", level = 2) |>     dplyr::rename(ADM2_NAME = adm_02) |>     dplyr::select(ADM2_NAME, geometry)) #> Departement Level Selected #> Simple feature collection with 67 features and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 0.16625 ymin: 11.69697 xmax: 15.99564 ymax: 23.53319 #> Geodetic CRS:  WGS 84 #> # A tibble: 67 × 2 #>    ADM2_NAME                                                            geometry #>    <chr>                                                      <MULTIPOLYGON [°]> #>  1 Abala        (((3.881287 15.68909, 4.012085 15.3941, 4.059692 15.29169, 4.07… #>  2 Abalak       (((6.604492 16.28528, 6.671082 16.1283, 6.752075 16.01868, 6.72… #>  3 Aderbissinat (((10.98339 17.64841, 10.9967 17.10229, 10.9957 17.10159, 10.90… #>  4 Aguié        (((7.780273 13.70728, 7.795715 13.69031, 7.813904 13.6731, 7.82… #>  5 Arlit        (((6.394469 17.90632, 6.190251 17.90357, 6.046757 17.90634, 6.0… #>  6 Ayerou       (((1.500654 15.27511, 1.49707 15.02948, 1.496277 15.02209, 1.48… #>  7 Bagaroua     (((4.835693 14.49231, 4.859497 14.48151, 4.888672 14.49292, 4.8… #>  8 Balleyara    (((2.786499 13.87292, 2.842285 13.86151, 2.862305 13.86292, 2.8… #>  9 Banibangou   (((3.005188 15.34599, 3.009349 15.34582, 3.013916 15.34088, 3.0… #> 10 Bankilaré    (((0.9636841 14.53833, 0.9520874 14.52112, 0.9116821 14.50391, … #> # ℹ 57 more rows (MRT <- get_shapefiles(country_code = \"MRT\", level = 2) |>     dplyr::rename(ADM2_NAME = ADM2_EN) |>     dplyr::select(ADM2_NAME, geometry)) #> Departement Level Selected #> Simple feature collection with 57 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -17.1016 ymin: 14.7197 xmax: -4.8333 ymax: 27.3632 #> Geodetic CRS:  WGS 84 #> # A tibble: 57 × 2 #>    ADM2_NAME                                                            geometry #>    <chr>                                                           <POLYGON [°]> #>  1 Akjoujt   ((-15.2212 19.0112, -15.2397 19.0162, -14.9966 19.1558, -14.923 19… #>  2 Aleg      ((-13.2468 17.3021, -13.2014 17.2625, -13.1608 17.2237, -13.1033 1… #>  3 Amourj    ((-7.1439 16.1021, -7.1226 16.0984, -6.8056 16.0426, -6.7248 16.03… #>  4 Aoujeft   ((-11.8715 19.1973, -12.0862 19.0671, -12.2453 18.9656, -12.2724 1… #>  5 Arafat    ((-15.9408 18.0502, -15.9427 18.047, -15.9453 18.0395, -15.9488 18… #>  6 Atar      ((-14.0216 19.6299, -14.0336 19.6199, -14.0392 19.6107, -14.0644 1… #>  7 Bababe    ((-13.9882 16.28, -13.9882 16.2867, -13.9886 16.2971, -13.9899 16.… #>  8 Barkeol   ((-12.2616 17.0086, -12.2631 17.0016, -12.2638 17.0051, -12.2646 1… #>  9 Basseknou ((-6.2565 15.6607, -6.2557 16.0007, -6.7248 16.0374, -6.8056 16.04… #> 10 Benichab  ((-16.0754 18.4968, -16.0827 18.5054, -16.0876 18.5269, -16.0957 1… #> # ℹ 47 more rows SEN_MAP <- ggplot2::ggplot(SEN) +   ggplot2::geom_sf(ggplot2::aes(fill = ADM2_NAME)) +   ggplot2::scale_fill_manual(values = asp_palette(\"Countries\", 45, type = \"continuous\"),                              guide = \"none\")  +   ggplot2::labs(title = \"Senegal\") +   themeaspdark()  SEN_MAP BFA_MAP <- ggplot2::ggplot(BFA) +   ggplot2::geom_sf(ggplot2::aes(fill = ADM2_NAME)) +   ggplot2::scale_fill_manual(values = asp_palette(\"Countries\", 45, type = \"continuous\"),                              guide = \"none\")  +   ggplot2::labs(title = \"Burkina Faso\") +   themeaspdark()  BFA_MAP NER_MAP <- ggplot2::ggplot(NER) +   ggplot2::geom_sf(ggplot2::aes(fill = ADM2_NAME)) +   ggplot2::scale_fill_manual(values = asp_palette(\"Countries\", 67, type = \"continuous\"),                              guide = \"none\")  +   ggplot2::labs(title = \"Niger\") +   themeaspdark()  MRT_MAP <- ggplot2::ggplot(MRT) +   ggplot2::geom_sf(ggplot2::aes(fill = ADM2_NAME)) +   ggplot2::scale_fill_manual(values = asp_palette(\"Countries\", 57, type = \"continuous\"),                              guide = \"none\")  +   ggplot2::labs(title = \"Mauritania\") +   themeaspdark()  MRT_MAP # Patchwork SEN_MAP + BFA_MAP + NER_MAP + MRT_MAP SAHEL_MAP <- ggplot2::ggplot(rbind(SEN, BFA, MRT, NER)) +   ggplot2::geom_sf(ggplot2::aes(fill = ADM2_NAME)) +   ggplot2::scale_fill_manual(values = asp_palette(\"Countries\", 214, type = \"continuous\"),                              guide = \"none\")  +   ggplot2::labs(title = \"Sahel ASP Countries\") +   themeaspdark() SAHEL_MAP"},{"path":"https://bbieri.github.io/SahelGraphR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bernhard Bieri. Author, maintainer.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bieri B (2023). SahelGraphR: SahelGraphR Accelerates Production Sahel ASP RCT Graphs Tables. R package version 0.1.0, https://bbieri.github.io/SahelGraphR/.","code":"@Manual{,   title = {SahelGraphR: SahelGraphR Accelerates the Production of Sahel ASP RCT Graphs and Tables},   author = {Bernhard Bieri},   year = {2023},   note = {R package version 0.1.0},   url = {https://bbieri.github.io/SahelGraphR/}, }"},{"path":"https://bbieri.github.io/SahelGraphR/index.html","id":"sahelgraphr-","dir":"","previous_headings":"","what":"SahelGraphR Accelerates the Production of Sahel ASP RCT Graphs and Tables","title":"SahelGraphR Accelerates the Production of Sahel ASP RCT Graphs and Tables","text":"SahelGraphR package aimed providing functions speed production graphs (maybe tables future?) Sahel ASP RCT evaluation DIME.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"SahelGraphR Accelerates the Production of Sahel ASP RCT Graphs and Tables","text":"can install development version SahelGraphR GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"BBieri/SahelGraphR\")"},{"path":"https://bbieri.github.io/SahelGraphR/index.html","id":"graphs","dir":"","previous_headings":"","what":"Graphs","title":"SahelGraphR Accelerates the Production of Sahel ASP RCT Graphs and Tables","text":"{SahelGraphr} contains functions wrappers rapidly produce consistent graphs across four countries.","code":""},{"path":[]},{"path":"https://bbieri.github.io/SahelGraphR/index.html","id":"distribution-graphs","dir":"","previous_headings":"Graphs","what":"Distribution Graphs","title":"SahelGraphR Accelerates the Production of Sahel ASP RCT Graphs and Tables","text":"Distribution graphs allow users visualize common support distributions. Visit package site options.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/index.html","id":"maps","dir":"","previous_headings":"","what":"Maps","title":"SahelGraphR Accelerates the Production of Sahel ASP RCT Graphs and Tables","text":"SahelGraphR includes helper function download (sub-)national shapefiles HDX easy fast mapmaking R four countries RCT.","code":"#> Departement Level Selected"},{"path":"https://bbieri.github.io/SahelGraphR/index.html","id":"themes","dir":"","previous_headings":"","what":"Themes","title":"SahelGraphR Accelerates the Production of Sahel ASP RCT Graphs and Tables","text":"package also contains two themes production ggplot2 graphs Sahel ASP graphs.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/index.html","id":"dark-theme","dir":"","previous_headings":"Themes","what":"Dark theme:","title":"SahelGraphR Accelerates the Production of Sahel ASP RCT Graphs and Tables","text":"example graph using dark theme:","code":"library(SahelGraphR) ## basic example code library(ggplot2)   # Prepare data cty_mpg <-   aggregate(mpg$cty, by = list(mpg$manufacturer), FUN = mean)  # aggregate colnames(cty_mpg) <- c(\"make\", \"mileage\")  # change column names cty_mpg <- cty_mpg[order(cty_mpg$mileage),]  # sort cty_mpg$make <- factor(cty_mpg$make, levels = cty_mpg$make) # Plot ggplot(cty_mpg, aes(x = make, y = mileage)) +   geom_segment(aes(     x = make,     xend = make,     y = 0,     yend = mileage   ), color = \"white\") +   geom_point(size = 3, color = SahelGraphR::asp_palettes$Dark[[\"yellow-full\"]]) +   labs(title = \"Lollipop Chart\",        subtitle = \"Make Vs Avg. Mileage\",        caption = \"source: mpg\") +   SahelGraphR::themeaspdark() +   theme(axis.text.x = element_text(angle = 65, vjust = 0.6))"},{"path":"https://bbieri.github.io/SahelGraphR/index.html","id":"light-theme","dir":"","previous_headings":"Themes","what":"Light theme:","title":"SahelGraphR Accelerates the Production of Sahel ASP RCT Graphs and Tables","text":"example graph using light theme:","code":"library(SahelGraphR) ## basic example code library(ggplot2)   # Prepare data cty_mpg <-   aggregate(mpg$cty, by = list(mpg$manufacturer), FUN = mean)  # aggregate colnames(cty_mpg) <- c(\"make\", \"mileage\")  # change column names cty_mpg <- cty_mpg[order(cty_mpg$mileage),]  # sort cty_mpg$make <- factor(cty_mpg$make, levels = cty_mpg$make) # Plot ggplot(cty_mpg, aes(x = make, y = mileage)) +   geom_segment(aes(     x = make,     xend = make,     y = 0,     yend = mileage   ), color = \"#4c4d4c\") +   geom_point(size = 3, color = SahelGraphR::asp_palettes$Light[[\"anthracite-full\"]]) +   labs(title = \"Lollipop Chart\",        subtitle = \"Make Vs Avg. Mileage\",        caption = \"source: mpg\") +   SahelGraphR::themeasplight() +   theme(axis.text.x = element_text(angle = 65, vjust = 0.6))"},{"path":"https://bbieri.github.io/SahelGraphR/reference/asp_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"A palette generator for the Sahel Adaptive Social Protection RCT — asp_palette","title":"A palette generator for the Sahel Adaptive Social Protection RCT — asp_palette","text":"color palettes useful production graphs Sahel ASP RCT program. function calls one two official palettes asp_palette: one dark theme one light theme.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/asp_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A palette generator for the Sahel Adaptive Social Protection RCT — asp_palette","text":"","code":"asp_palette(name, n, type = c(\"discrete\", \"continuous\"))"},{"path":"https://bbieri.github.io/SahelGraphR/reference/asp_palette.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A palette generator for the Sahel Adaptive Social Protection RCT — asp_palette","text":"Adapted https://github.com/karthik/wesanderson/blob/master/R/colors.R","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/asp_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A palette generator for the Sahel Adaptive Social Protection RCT — asp_palette","text":"name Name desired palette. Current choices : IHEID, Centres, SDGs. n Number colors desired. omitted, uses colors. type Either \"continuous\" \"discrete\". Use continuous want automatically interpolate colors.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/asp_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A palette generator for the Sahel Adaptive Social Protection RCT — asp_palette","text":"vector colors.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/asp_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A palette generator for the Sahel Adaptive Social Protection RCT — asp_palette","text":"","code":"asp_palette(\"Dark\")  asp_palette(\"Light\")   # If you need more colors than normally found in a palette, you # can use a continuous palette to interpolate between existing # colors pal <- asp_palette(21, name = \"Dark\", type = \"continuous\") image(volcano, col = pal)"},{"path":"https://bbieri.github.io/SahelGraphR/reference/asp_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete list of palettes — asp_palettes","title":"Complete list of palettes — asp_palettes","text":"Use asp_palette construct palettes desired length.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/asp_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complete list of palettes — asp_palettes","text":"","code":"asp_palettes"},{"path":"https://bbieri.github.io/SahelGraphR/reference/asp_palettes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Complete list of palettes — asp_palettes","text":"object class list length 3.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/collate_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Collate regression models into a standardised tibble — collate_models","title":"Collate regression models into a standardised tibble — collate_models","text":"Collate regression models standardised tibble","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/collate_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collate regression models into a standardised tibble — collate_models","text":"","code":"collate_models(models)"},{"path":"https://bbieri.github.io/SahelGraphR/reference/collate_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collate regression models into a standardised tibble — collate_models","text":"models list regression models supported {broom}","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/collate_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collate regression models into a standardised tibble — collate_models","text":"tibble statistics multiple models.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/collate_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collate regression models into a standardised tibble — collate_models","text":"","code":"# Use the  R Swiss data for examples with a random treatment set.seed(1234) swiss <- dplyr::bind_cols(swiss,                            treatment = rbinom(seq(nrow(swiss)),1, 0.5)) |>          dplyr::mutate(Education = Education + 0.15 * treatment)  reg1 <- lm(formula = Education ~ treatment, swiss) reg2 <- lm(formula = Education ~ treatment + Catholic, swiss) reg3 <- lm(formula = Education ~ treatment * Catholic, swiss)  models <- list(reg1,                reg2,                reg3) collate_models(models = models) #> # A tibble: 9 × 20 #>   modelID term           estimate std.error statistic p.value conf.low conf.high #>     <int> <chr>             <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl> #> 1       1 (Intercept)    10.1        2.02      5.02   8.70e-6    6.06    14.2    #> 2       1 treatment       1.81       2.83      0.641  5.25e-1   -3.88     7.50   #> 3       2 (Intercept)    11.6        2.42      4.77   2.05e-5    6.68    16.4    #> 4       2 treatment       1.94       2.82      0.687  4.95e-1   -3.75     7.63   #> 5       2 Catholic       -0.0364     0.0342   -1.06   2.93e-1   -0.105    0.0326 #> 6       3 (Intercept)    11.7        2.75      4.24   1.15e-4    6.12    17.2    #> 7       3 treatment       1.72       4.05      0.425  6.73e-1   -6.44     9.89   #> 8       3 Catholic       -0.0388     0.0468   -0.830  4.11e-1   -0.133    0.0555 #> 9       3 treatment:Cat…  0.00530    0.0695    0.0762 9.40e-1   -0.135    0.146  #> # ℹ 12 more variables: r.squared <dbl>, adj.r.squared <dbl>, sigma <dbl>, #> #   statistic_model <dbl>, p.value_model <dbl>, df <dbl>, logLik <dbl>, #> #   AIC <dbl>, BIC <dbl>, deviance <dbl>, df.residual <int>, nobs <int>"},{"path":"https://bbieri.github.io/SahelGraphR/reference/collate_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Collate predicted values of a list of models into a large data frame. — collate_predictions","title":"Collate predicted values of a list of models into a large data frame. — collate_predictions","text":"Collate predicted values list models large data frame.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/collate_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collate predicted values of a list of models into a large data frame. — collate_predictions","text":"","code":"collate_predictions(models, by = NULL)"},{"path":"https://bbieri.github.io/SahelGraphR/reference/collate_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collate predicted values of a list of models into a large data frame. — collate_predictions","text":"models List regression models. String variable name take mean prediction . NULL default.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/collate_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collate predicted values of a list of models into a large data frame. — collate_predictions","text":"tibble containing collated predictions grouped treatment .","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/collate_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collate predicted values of a list of models into a large data frame. — collate_predictions","text":"","code":"# Generate an example dataset swiss2 <- dplyr::bind_cols(swiss,                           treatment = rbinom(seq(nrow(swiss)),1, 0.5)) |>   dplyr::mutate(Education = Education + 2.5 * treatment) reg1 <- lm(formula = Education ~ treatment, swiss2) reg2 <- lm(formula = Education ~ treatment + Catholic, swiss2) reg3 <- lm(formula = Education ~ treatment * Catholic, swiss2) models <- list(reg1,                reg2,                reg3) # Full predictions: collate_predictions(models = models) #> # A tibble: 141 × 11 #>    modelID .rownames    Education treatment .fitted .resid   .hat .sigma .cooksd #>      <int> <chr>            <dbl>     <int>   <dbl>  <dbl>  <dbl>  <dbl>   <dbl> #>  1       1 Courtelary        12           0    11.3  0.679 0.0357   9.82 9.37e-5 #>  2       1 Delemont           9           0    11.3 -2.32  0.0357   9.82 1.10e-3 #>  3       1 Franches-Mnt       7.5         1    13.0 -5.47  0.0526   9.79 9.31e-3 #>  4       1 Moutier            7           0    11.3 -4.32  0.0357   9.80 3.80e-3 #>  5       1 Neuveville        15           0    11.3  3.68  0.0357   9.81 2.75e-3 #>  6       1 Porrentruy         9.5         1    13.0 -3.47  0.0526   9.81 3.75e-3 #>  7       1 Broye              9.5         1    13.0 -3.47  0.0526   9.81 3.75e-3 #>  8       1 Glane              8           0    11.3 -3.32  0.0357   9.81 2.25e-3 #>  9       1 Gruyere            9.5         1    13.0 -3.47  0.0526   9.81 3.75e-3 #> 10       1 Sarine            13           0    11.3  1.68  0.0357   9.82 5.74e-4 #> # ℹ 131 more rows #> # ℹ 2 more variables: .std.resid <dbl>, Catholic <dbl> # Grouped by model and treatment status: collate_predictions(models = models, by = \"treatment\") #> # A tibble: 6 × 3 #>   modelID treatment mean_fitted_value #>     <int>     <int>             <dbl> #> 1       1         0              11.3 #> 2       1         1              13.0 #> 3       2         0              11.3 #> 4       2         1              13.0 #> 5       3         0              11.3 #> 6       3         1              13.0"},{"path":"https://bbieri.github.io/SahelGraphR/reference/geom_flat_violin_l.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat (or half) vertical violin plot geom. Left side. — geom_flat_violin_l","title":"Flat (or half) vertical violin plot geom. Left side. — geom_flat_violin_l","text":"geom_flat_violin_l() plots half violin plot created ggplot2::geom_violin(). function plots vertical half violin plot. horizontal version function, check geom_flat_violin_h().","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/geom_flat_violin_l.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat (or half) vertical violin plot geom. Left side. — geom_flat_violin_l","text":"","code":"geom_flat_violin_l(   mapping = NULL,   data = NULL,   stat = \"ydensity\",   position = \"dodge\",   trim = TRUE,   scale = \"area\",   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://bbieri.github.io/SahelGraphR/reference/geom_flat_violin_l.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Flat (or half) vertical violin plot geom. Left side. — geom_flat_violin_l","text":"Adapted following S-O thread.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/geom_flat_violin_l.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat (or half) vertical violin plot geom. Left side. — geom_flat_violin_l","text":"mapping Set aesthetic mappings created ggplot2::aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat Use override default connection geom_violin() stat_ydensity(). position Position adjustment, either string, result call position adjustment function. trim TRUE (default), trim tails violins range data. FALSE, trim tails. scale \"area\" (default), violins area (trimming tails). \"count\", areas scaled proportionally number observations. \"width\", violins maximum width. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes Use override default connection geom_violin() stat_ydensity(). ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" linewidth = 3. may also parameters paired geom/stat.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/geom_flat_violin_l.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat (or half) vertical violin plot geom. Left side. — geom_flat_violin_l","text":"half violin vertical geom.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/geom_flat_violin_l.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat (or half) vertical violin plot geom. Left side. — geom_flat_violin_l","text":"","code":"df = data.frame(val = c(), group = c()) for(i in 1:5){   offset = i - 3   df = rbind(df,              data.frame(val = rnorm(n = 50, mean = 0 - offset), group = i)   ) } ggplot2::ggplot(df, ggplot2::aes(as.factor(group), val)) +    geom_flat_violin_l(fill = \"lightblue\") +    themeaspdark()"},{"path":"https://bbieri.github.io/SahelGraphR/reference/geom_flat_violin_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat (or half) vertical violin plot geom. Right side. — geom_flat_violin_r","title":"Flat (or half) vertical violin plot geom. Right side. — geom_flat_violin_r","text":"geom_flat_violin_r() plots half violin plot created ggplot2::geom_violin(). function plots vertical half violin plot. horizontal version function, check geom_flat_violin_h().","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/geom_flat_violin_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat (or half) vertical violin plot geom. Right side. — geom_flat_violin_r","text":"","code":"geom_flat_violin_r(   mapping = NULL,   data = NULL,   stat = \"ydensity\",   position = \"dodge\",   trim = TRUE,   scale = \"area\",   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://bbieri.github.io/SahelGraphR/reference/geom_flat_violin_r.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Flat (or half) vertical violin plot geom. Right side. — geom_flat_violin_r","text":"Adapted following S-O thread.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/geom_flat_violin_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat (or half) vertical violin plot geom. Right side. — geom_flat_violin_r","text":"mapping Set aesthetic mappings created ggplot2::aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat Use override default connection geom_violin() stat_ydensity(). position Position adjustment, either string, result call position adjustment function. trim TRUE (default), trim tails violins range data. FALSE, trim tails. scale \"area\" (default), violins area (trimming tails). \"count\", areas scaled proportionally number observations. \"width\", violins maximum width. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes Use override default connection geom_violin() stat_ydensity(). ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" linewidth = 3. may also parameters paired geom/stat.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/geom_flat_violin_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat (or half) vertical violin plot geom. Right side. — geom_flat_violin_r","text":"half violin vertical geom.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/geom_flat_violin_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat (or half) vertical violin plot geom. Right side. — geom_flat_violin_r","text":"","code":"# Right:  df = data.frame(val = c(), group = c()) for(i in 1:5){   offset = i - 3   df = rbind(df,              data.frame(val = rnorm(n = 50, mean = 0 - offset), group = i)   ) } ggplot2::ggplot(df, ggplot2::aes(as.factor(group), val)) +    geom_flat_violin_r(fill = \"lightblue\") +    themeaspdark()   # Single Variable Horizontally with coord_flip():  ggplot2::ggplot(sahel_sim, ggplot2::aes(x = country_names,                                          y = hh_income,                                          fill = country_names)) +   geom_flat_violin_r(alpha = 0.9,                      position = ggplot2::position_dodge(1),                      width = 1.5) +   ggplot2::coord_flip() +   ggplot2::geom_boxplot(width = 0.1, color = \"grey90\", alpha = 0.2,                          position = ggplot2::position_dodge(1)) +   ggplot2::scale_fill_manual(values = unname(asp_palettes$Countries)) +   ggplot2::scale_y_log10() +   ggplot2::labs(title = \"Household Income\", subtitle = \"Violin Plot\",                caption = \"Synthetic Data\",                x = \"\", y = \"2016 USD PPP\", fill = \"Country\") +   SahelGraphR::themeaspdark()    # Multiple Variables Horizontally with coord_flip():  sahel_sim_long_monetary <- tidyr::gather(sahel_sim, key = \"variable\",                                          value = \"value\", hh_income,                                          hh_consumption) ggplot2::ggplot(sahel_sim_long_monetary,                  ggplot2::aes(x = variable,                                y = value,                                fill = country_names)) +   geom_flat_violin_r(alpha = 0.9,                      position = ggplot2::position_dodge(1),                      width = 3) +   ggplot2::coord_flip() +   ggplot2::geom_boxplot(width = 0.1, color = \"grey90\", alpha = 0.2,                          position = ggplot2::position_dodge(1)) +   ggplot2::scale_fill_manual(values = unname(asp_palettes$Countries)) +   ggplot2::scale_x_discrete(labels = c(\"Consumption\", \"Income\")) +   ggplot2::scale_y_log10() +   ggplot2::labs(title = \"Household Income & Household Consumption\",                  subtitle = \"Violin Plot\", caption = \"Synthetic Data\",        x = \"\", y = \"2016 USD PPP\", fill = \"Country\") +   SahelGraphR::themeaspdark() #> Warning: `position_dodge()` requires non-overlapping x intervals"},{"path":"https://bbieri.github.io/SahelGraphR/reference/get_shapefiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Download (Sub)National Shapefiles — get_shapefiles","title":"Download (Sub)National Shapefiles — get_shapefiles","text":"Function download (sub)national shapefiles four countries Sahel ASP RCT.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/get_shapefiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download (Sub)National Shapefiles — get_shapefiles","text":"","code":"get_shapefiles(country_code = c(\"BFA\", \"NER\", \"MRT\", \"SEN\"), level = 1)"},{"path":"https://bbieri.github.io/SahelGraphR/reference/get_shapefiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download (Sub)National Shapefiles — get_shapefiles","text":"country_code One c(\"BFA\", \"NER\", \"MRT\", \"SEN\"). ISO country code. level One c(0, 1, 2, 3). Administrative level.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/get_shapefiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download (Sub)National Shapefiles — get_shapefiles","text":"{sf} object ready worked .","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/get_shapefiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download (Sub)National Shapefiles — get_shapefiles","text":"","code":"(SEN <- get_shapefiles(country_code = \"SEN\", level = 2) |>   dplyr::rename(ADM2_NAME = ADM2_FR) |>   dplyr::select(ADM2_NAME, geometry)) #> Departement Level Selected #> Simple feature collection with 45 features and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -17.53092 ymin: 12.30777 xmax: -11.34801 ymax: 16.69373 #> Geodetic CRS:  WGS 84 #> # A tibble: 45 × 2 #>    ADM2_NAME                                                            geometry #>    <chr>                                                      <MULTIPOLYGON [°]> #>  1 Bakel       (((-12.66549 15.11117, -12.66378 15.11113, -12.66217 15.11114, -… #>  2 Bambey      (((-16.41398 15.02491, -16.40452 15.02327, -16.39624 15.02347, -… #>  3 Bignona     (((-15.89499 13.16475, -15.89556 13.16277, -15.89629 13.16206, -… #>  4 Birkelane   (((-15.59026 14.11543, -15.58989 14.11477, -15.58866 14.11133, -… #>  5 Bounkiling  (((-15.49857 13.39529, -15.49636 13.395, -15.49446 13.39515, -15… #>  6 Dagana      (((-15.41078 16.53676, -15.40685 16.53634, -15.40398 16.53667, -… #>  7 Dakar       (((-17.39918 14.6713, -17.39911 14.67127, -17.39909 14.67123, -1… #>  8 Diourbel    (((-16.22843 14.95423, -16.22363 14.95312, -16.21434 14.95332, -… #>  9 Fatick      (((-16.49001 14.59536, -16.48651 14.59284, -16.48172 14.5933, -1… #> 10 Foundiougne (((-16.39603 14.14731, -16.39401 14.14674, -16.39217 14.14686, -… #> # ℹ 35 more rows (BFA <- get_shapefiles(country_code = \"BFA\", level = 2) |>   dplyr::rename(ADM2_NAME = adm2_name1) |>   dplyr::select(ADM2_NAME, geometry)) #> Departement Level Selected #> Simple feature collection with 45 features and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -5.513242 ymin: 9.410472 xmax: 2.40501 ymax: 15.08304 #> Geodetic CRS:  WGS 84 #> # A tibble: 45 × 2 #>    ADM2_NAME                                                            geometry #>    <chr>                                                      <MULTIPOLYGON [°]> #>  1 Kadiogo   (((-1.216611 12.33167, -1.215898 12.33139, -1.215505 12.33139, -1.… #>  2 Balé      (((-2.705114 11.60608, -2.70495 11.60584, -2.704798 11.60572, -2.7… #>  3 Banwa     (((-4.631655 12.05736, -4.631655 12.05736, -4.630345 12.05716, -4.… #>  4 Kossi     (((-4.232666 12.72638, -4.23253 12.72673, -4.23257 12.72711, -4.23… #>  5 Mouhoun   (((-3.495215 11.98364, -3.495108 11.98349, -3.495001 11.98335, -3.… #>  6 Nayala    (((-2.769197 12.61879, -2.769364 12.61845, -2.769412 12.61835, -2.… #>  7 Sourou    (((-3.440457 13.1593, -3.44041 13.15933, -3.43884 13.16069, -3.437… #>  8 Comoé     (((-3.969175 9.87328, -3.970301 9.871402, -3.970316 9.871277, -3.9… #>  9 Léraba    (((-5.115375 10.29121, -5.115273 10.29127, -5.114962 10.29158, -5.… #> 10 Boulgou   (((-0.108402 11.13307, -0.1167685 11.13473, -0.1251351 11.1364, -0… #> # ℹ 35 more rows (NER <- get_shapefiles(country_code = \"NER\", level = 2) |>   dplyr::rename(ADM2_NAME = adm_02) |>   dplyr::select(ADM2_NAME, geometry)) #> Departement Level Selected #> Simple feature collection with 67 features and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 0.16625 ymin: 11.69697 xmax: 15.99564 ymax: 23.53319 #> Geodetic CRS:  WGS 84 #> # A tibble: 67 × 2 #>    ADM2_NAME                                                            geometry #>    <chr>                                                      <MULTIPOLYGON [°]> #>  1 Abala        (((3.881287 15.68909, 4.012085 15.3941, 4.059692 15.29169, 4.07… #>  2 Abalak       (((6.604492 16.28528, 6.671082 16.1283, 6.752075 16.01868, 6.72… #>  3 Aderbissinat (((10.98339 17.64841, 10.9967 17.10229, 10.9957 17.10159, 10.90… #>  4 Aguié        (((7.780273 13.70728, 7.795715 13.69031, 7.813904 13.6731, 7.82… #>  5 Arlit        (((6.394469 17.90632, 6.190251 17.90357, 6.046757 17.90634, 6.0… #>  6 Ayerou       (((1.500654 15.27511, 1.49707 15.02948, 1.496277 15.02209, 1.48… #>  7 Bagaroua     (((4.835693 14.49231, 4.859497 14.48151, 4.888672 14.49292, 4.8… #>  8 Balleyara    (((2.786499 13.87292, 2.842285 13.86151, 2.862305 13.86292, 2.8… #>  9 Banibangou   (((3.005188 15.34599, 3.009349 15.34582, 3.013916 15.34088, 3.0… #> 10 Bankilaré    (((0.9636841 14.53833, 0.9520874 14.52112, 0.9116821 14.50391, … #> # ℹ 57 more rows (MRT <- get_shapefiles(country_code = \"MRT\", level = 2) |>   dplyr::rename(ADM2_NAME = ADM2_EN) |>   dplyr::select(ADM2_NAME, geometry)) #> Departement Level Selected #> Simple feature collection with 57 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -17.1016 ymin: 14.7197 xmax: -4.8333 ymax: 27.3632 #> Geodetic CRS:  WGS 84 #> # A tibble: 57 × 2 #>    ADM2_NAME                                                            geometry #>    <chr>                                                           <POLYGON [°]> #>  1 Akjoujt   ((-15.2212 19.0112, -15.2397 19.0162, -14.9966 19.1558, -14.923 19… #>  2 Aleg      ((-13.2468 17.3021, -13.2014 17.2625, -13.1608 17.2237, -13.1033 1… #>  3 Amourj    ((-7.1439 16.1021, -7.1226 16.0984, -6.8056 16.0426, -6.7248 16.03… #>  4 Aoujeft   ((-11.8715 19.1973, -12.0862 19.0671, -12.2453 18.9656, -12.2724 1… #>  5 Arafat    ((-15.9408 18.0502, -15.9427 18.047, -15.9453 18.0395, -15.9488 18… #>  6 Atar      ((-14.0216 19.6299, -14.0336 19.6199, -14.0392 19.6107, -14.0644 1… #>  7 Bababe    ((-13.9882 16.28, -13.9882 16.2867, -13.9886 16.2971, -13.9899 16.… #>  8 Barkeol   ((-12.2616 17.0086, -12.2631 17.0016, -12.2638 17.0051, -12.2646 1… #>  9 Basseknou ((-6.2565 15.6607, -6.2557 16.0007, -6.7248 16.0374, -6.8056 16.04… #> 10 Benichab  ((-16.0754 18.4968, -16.0827 18.5054, -16.0876 18.5269, -16.0957 1… #> # ℹ 47 more rows"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggboxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Individual Boxplot Plots per Country — sahel_ggboxplot","title":"Individual Boxplot Plots per Country — sahel_ggboxplot","text":"Individual Boxplot Plots per Country","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggboxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Individual Boxplot Plots per Country — sahel_ggboxplot","text":"","code":"sahel_ggboxplot(   data,   variable,   countries,   title = deparse(substitute(variable)),   subtitle = \"Boxplot Plot\",   caption = NULL,   xtitle = NULL,   ytitle = NULL,   scale = NULL,   theme = themeaspdark )"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggboxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Individual Boxplot Plots per Country — sahel_ggboxplot","text":"data data frame variable Variable name plot. Continuous count. countries Variable name plot. Continuous count. title Plot title subtitle Plot subtitle caption Plot caption xtitle Plot x-axis title ytitle Plot y-axis title scale Scaling function {ggplot2} theme Theme applied","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggboxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Individual Boxplot Plots per Country — sahel_ggboxplot","text":"ggplot object boxplot style.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggboxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Individual Boxplot Plots per Country — sahel_ggboxplot","text":"","code":"library(patchwork) sahel_ggboxplot(   data = sahel_sim,   variable = hh_income,   countries = country_names,   title = \"Household Income\",   scale = ggplot2::scale_x_log10 ) + sahel_ggboxplot(   data = sahel_sim,   variable = hh_consumption,   countries = country_names,   title = \"Household Consumption\",   scale = ggplot2::scale_x_log10 )"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggcoefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Barplot for Sahel ASP coefficients with sensible defaults — sahel_ggcoefs","title":"Barplot for Sahel ASP coefficients with sensible defaults — sahel_ggcoefs","text":"Barplot Sahel ASP coefficients sensible defaults","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggcoefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barplot for Sahel ASP coefficients with sensible defaults — sahel_ggcoefs","text":"","code":"sahel_ggcoefs(   data,   x = var_name,   y = Value.y,   fill = Treatment,   position = ggplot2::position_dodge(0.9),   bar_colors = unname(asp_palettes$Dark[2:5]),   bar_width = 0.8,   ymin = Value.y - Value.x,   ymax = Value.y + Value.x,   errorbar_color = \"grey75\",   errorbar_width = 0.5,   title = \"Coefficient Plot\",   subtitle = \"Barchart\",   caption =     \"Monetary variables are expressed in 2016 USD PPP.\\n                                    Error Bars are 95% confidence intervals.\",   xtitle = \"\",   ytitle = \"\",   xangle = 90,   xvjust = 0.6 )"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggcoefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barplot for Sahel ASP coefficients with sensible defaults — sahel_ggcoefs","text":"data preprocessed dataframe sahel_prep_ggcoefs() x Variable x axis. need change pre-processed. y Variable y axis. need change pre-processed. fill Treatment variable fill group. need change pre-processed. position ggplot2::position_dodge(0.9) bar error_bar position. bar_colors Colors bars corresponding treatment arm. bar_width Width bars. ymin Computation min error bar. ymax Computation max error bar. errorbar_color Color error bar. errorbar_width Width error bar. title Plot title. subtitle Plot subtitle. caption Plot caption. xtitle X-axis title. ytitle Y-axis title. xangle Label angle x-axis label. xvjust Vertical adjustment x-axis label.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggcoefs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barplot for Sahel ASP coefficients with sensible defaults — sahel_ggcoefs","text":"ggplot plot coefficients consistent Sahel ASP project data theme.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggcoefs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barplot for Sahel ASP coefficients with sensible defaults — sahel_ggcoefs","text":"","code":"# Don't forget to mount the data if using the actual data # prodregs <- #  haven::read_dta(r\"(U:\\fu2_MRT\\05_Regstats\\fu2_MRT_regstats_hh_prod.dta)\")  # Example with simulated data set.seed(1234) prodregs <- fabricatr::fabricate(N = 8,                                  var_name = c(\"consum_2_day_eq_ppp\",                                                \"consum_2_day_ppp\",                                                \"food_2_day_eq_ppp\",                                                \"food_2_day_ppp\",                                                \"food_2_day_g_ppp\",                                                \"food_2_day_g_eq_ppp\",                                                \"food_2_g_d\",                                                \"FIES_rvrs_raw\"),                                  b0 = 0,                                  b1 = rnorm(N, 0, 1),                                  b2 = rnorm(N, 0, 1),                                  b3 = rnorm(N, 0, 1),                                  avg0 = rnorm(N, 7, 1),                                  avg1 = rnorm(N, 8, 1),                                  avg2 = rnorm(N, 9, 1),                                  avg3 = rnorm(N, 10, 1),                                  se0 = rnorm(N, 0, 1),                                  se1 = rnorm(N, 0, 1),                                  se2 = rnorm(N, 0, 1),                                  se3 = rnorm(N, 0, 1),                                  ci95_0 = rnorm(N, 2, 1),                                  ci95_1 = rnorm(N, 2, 1),                                  ci95_2 = rnorm(N, 2, 1),                                  ci95_3 = rnorm(N, 2, 1),                                  p0 = rnorm(N, 0.8, 0.5),                                  p1 = rnorm(N, 0.8, 0.5),                                  p2 = rnorm(N, 0.8, 0.5),                                  p3 = rnorm(N, 0.8, 0.5),                                  mht_family = 1) |>   dplyr::select(-ID)   # Vertical  sahel_ggcoefs(sahel_prep_ggcoefs(prodregs))   # Horizontal  sahel_ggcoefs(sahel_prep_ggcoefs(prodregs)) + ggplot2::coord_flip()"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_gghalfviolin.html","id":null,"dir":"Reference","previous_headings":"","what":"High-Level Wrapper Half Violin Plots per Country — sahel_gghalfviolin","title":"High-Level Wrapper Half Violin Plots per Country — sahel_gghalfviolin","text":"function convenience wrapper violin plots within Sahel ASP plot. want custom plot, check geom_flat_violin_l() geom_flat_violin_r() functions package.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_gghalfviolin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"High-Level Wrapper Half Violin Plots per Country — sahel_gghalfviolin","text":"","code":"sahel_gghalfviolin(   data,   variable,   countries,   orientation = \"Vertical-Left\",   alpha_boxplot = 0.5,   alpha_violin = 0.8,   width_boxplot = 0.5,   width_violin = 0.8,   title = deparse(substitute(variable)),   subtitle = \"Half-Violin Plot\",   caption = NULL,   xtitle = NULL,   ytitle = NULL,   scale = ggplot2::geom_blank(),   add_boxplot = TRUE,   theme = themeaspdark )"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_gghalfviolin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"High-Level Wrapper Half Violin Plots per Country — sahel_gghalfviolin","text":"data data frame variable Variable name plot. Continuous count. countries Variable name plot. Continuous count. orientation Orientation graph alpha_boxplot Transparency boxplot element. alpha_violin Transparency violin element. width_boxplot Width boxplot element. width_violin Width violin element. title Plot title subtitle Plot subtitle caption Plot caption xtitle Plot x-axis title ytitle Plot y-axis title scale Scaling function {ggplot2} add_boxplot TRUE default. Add boxplot inside violin plots? theme Theme applied","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_gghalfviolin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"High-Level Wrapper Half Violin Plots per Country — sahel_gghalfviolin","text":"ggplot object half violin style.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_gghalfviolin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"High-Level Wrapper Half Violin Plots per Country — sahel_gghalfviolin","text":"","code":"library(patchwork)  # Vertical Left sahel_gghalfviolin(   data = sahel_sim,   variable = hh_income,   countries = country_names,   title = \"Household Income\",   scale = ggplot2::scale_y_log10() ) + sahel_gghalfviolin(   data = sahel_sim,   variable = hh_consumption,   countries = country_names,   title = \"Household Consumption\",   scale = ggplot2::scale_y_log10() )   # Vertical Right sahel_gghalfviolin(   data = sahel_sim,   variable = hh_income,   countries = country_names,   orientation = \"Vertical-Right\",   title = \"Household Income\",   scale = ggplot2::scale_y_log10() ) + sahel_gghalfviolin(   data = sahel_sim,   variable = hh_consumption,   countries = country_names,   orientation = \"Vertical-Right\",   title = \"Household Consumption\",   scale = ggplot2::scale_y_log10() )   # Horizontal sahel_gghalfviolin(   data = sahel_sim,   variable = hh_income,   countries = country_names,   orientation = \"Horizontal\",   title = \"Household Income\",   scale = ggplot2::scale_y_log10() ) + sahel_gghalfviolin(   data = sahel_sim,   variable = hh_consumption,   countries = country_names,   orientation = \"Horizontal\",   title = \"Household Consumption\",   scale = ggplot2::scale_y_log10() )"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggridges.html","id":null,"dir":"Reference","previous_headings":"","what":"Individual Ridgeline Plots per Country — sahel_ggridges","title":"Individual Ridgeline Plots per Country — sahel_ggridges","text":"Individual Ridgeline Plots per Country","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggridges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Individual Ridgeline Plots per Country — sahel_ggridges","text":"","code":"sahel_ggridges(   data,   variable,   countries,   title = deparse(substitute(variable)),   subtitle = \"Ridgeline Plot\",   caption = NULL,   xtitle = NULL,   ytitle = NULL,   scale = NULL,   theme = themeaspdark )"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggridges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Individual Ridgeline Plots per Country — sahel_ggridges","text":"data data frame variable Variable name plot. Continuous count. countries Variable name plot. Continuous count. title Plot title subtitle Plot subtitle caption Plot caption xtitle Plot x-axis title ytitle Plot y-axis title scale Scaling function {ggplot2} theme Theme applied","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggridges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Individual Ridgeline Plots per Country — sahel_ggridges","text":"ggplot object ridgeline style.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggridges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Individual Ridgeline Plots per Country — sahel_ggridges","text":"","code":"library(patchwork) sahel_ggridges(   data = sahel_sim,   variable = hh_income,   countries = country_names,   title = \"Household Income\",   scale = ggplot2::scale_x_log10 ) + sahel_ggridges(   data = sahel_sim,   variable = hh_consumption,   countries = country_names,   title = \"Household Consumption\",   scale = ggplot2::scale_x_log10 ) #> Picking joint bandwidth of 0.13 #> Picking joint bandwidth of 0.0685"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggviolin.html","id":null,"dir":"Reference","previous_headings":"","what":"Individual Violin Plots per Country — sahel_ggviolin","title":"Individual Violin Plots per Country — sahel_ggviolin","text":"Individual Violin Plots per Country","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggviolin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Individual Violin Plots per Country — sahel_ggviolin","text":"","code":"sahel_ggviolin(   data,   variable,   countries,   alpha_boxplot = 0.5,   alpha_violin = 0.8,   width_boxplot = 0.5,   width_violin = 0.8,   title = deparse(substitute(variable)),   subtitle = \"Violin Plot\",   caption = NULL,   xtitle = NULL,   ytitle = NULL,   scale = NULL,   add_boxplot = TRUE,   theme = themeaspdark )"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggviolin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Individual Violin Plots per Country — sahel_ggviolin","text":"data data frame variable Variable name plot. Continuous count. countries Variable name plot. Continuous count. alpha_boxplot Transparency boxplot element. alpha_violin Transparency violin element. width_boxplot Width boxplot element. width_violin Width violin element. title Plot title subtitle Plot subtitle caption Plot caption xtitle Plot x-axis title ytitle Plot y-axis title scale Scaling function {ggplot2} add_boxplot TRUE default. Add boxplot inside violin plots? theme Theme applied","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggviolin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Individual Violin Plots per Country — sahel_ggviolin","text":"ggplot object violin style.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_ggviolin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Individual Violin Plots per Country — sahel_ggviolin","text":"","code":"library(patchwork) sahel_ggviolin(   data = sahel_sim,   variable = hh_income,   countries = country_names,   title = \"Household Income\",   scale = ggplot2::scale_x_log10 ) + sahel_ggviolin(   data = sahel_sim,   variable = hh_consumption,   countries = country_names,   title = \"Household Consumption\",   scale = ggplot2::scale_x_log10 )"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_prep_gg.html","id":null,"dir":"Reference","previous_headings":"","what":"Sahel Prepare ggplot function — sahel_prep_gg","title":"Sahel Prepare ggplot function — sahel_prep_gg","text":"function prepares standard ASP data Stata format ready plotting one included plotting functions.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_prep_gg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sahel Prepare ggplot function — sahel_prep_gg","text":"","code":"sahel_prep_gg(data, key = \"variable\", value = \"value\", ...)"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_prep_gg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sahel Prepare ggplot function — sahel_prep_gg","text":"data Dataframe pivot. key String. Name variable pivot . value String. Name value variable. ... Additional agruments passed tidyr::gather() variables pivot tidyselect expressions","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_prep_gg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sahel Prepare ggplot function — sahel_prep_gg","text":"plotting ready tibble.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_prep_gg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sahel Prepare ggplot function — sahel_prep_gg","text":"","code":"sahel_sim_long_monetary <- tidyr::gather(sahel_sim, key = \"variable\",                                          value = \"value\", hh_income,                                          hh_consumption) sahel_sim_long_count <- tidyr::gather(sahel_sim, key = \"variable\",                                        value = \"value\", children_nr,                                        animals_nr, yr_educ_hhmean) sahel_sim_long_binary <- tidyr::gather(sahel_sim, key = \"variable\",                                        value = \"value\", has_children,                                        owns_animals, female_head)  dplyr::summarize(sahel_sim_long_monetary) #> data frame with 0 columns and 1 row dplyr::summarize(sahel_sim_long_count) #> data frame with 0 columns and 1 row dplyr::summarize(sahel_sim_long_binary) #> data frame with 0 columns and 1 row"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_prep_gg_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Sahel binary variables for plotting. — sahel_prep_gg_binary","title":"Prepare Sahel binary variables for plotting. — sahel_prep_gg_binary","text":"Prepare Sahel binary variables plotting.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_prep_gg_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Sahel binary variables for plotting. — sahel_prep_gg_binary","text":"","code":"sahel_prep_gg_binary(data, ..., alpha = 0.05)"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_prep_gg_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Sahel binary variables for plotting. — sahel_prep_gg_binary","text":"data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr) ... Passed group_by(), variables computations group . Computations always done ungrouped data frame. perform computations grouped data, need use separate mutate() step group_by(). Computations allowed nest_by(). ungroup(), variables remove grouping. alpha Signifiicance level confidence interval","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_prep_gg_binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Sahel binary variables for plotting. — sahel_prep_gg_binary","text":"dataframe ready plotting. Computes ","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_prep_gg_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Sahel binary variables for plotting. — sahel_prep_gg_binary","text":"","code":"sahel_sim_long_binary <- tidyr::gather(sahel_sim, key = \"variable\",                                        value = \"value\", has_children,                                        owns_animals, female_head) sahel_prep_gg_binary(sahel_sim_long_binary, country_names, variable,                        alpha = 0.05) #> # A tibble: 12 × 7 #> # Groups:   country_names [4] #>    country_names variable      mean    sd      se     t     CI #>    <chr>         <chr>        <dbl> <dbl>   <dbl> <dbl>  <dbl> #>  1 Burkina Faso  female_head  0.147 0.355 0.00915  1.96 0.0180 #>  2 Burkina Faso  has_children 0.789 0.408 0.0105   1.96 0.0207 #>  3 Burkina Faso  owns_animals 0.753 0.431 0.0111   1.96 0.0218 #>  4 Mauritania    female_head  0.147 0.354 0.00792  1.96 0.0155 #>  5 Mauritania    has_children 0.788 0.408 0.00913  1.96 0.0179 #>  6 Mauritania    owns_animals 0.758 0.429 0.00959  1.96 0.0188 #>  7 Niger         female_head  0.138 0.345 0.00814  1.96 0.0160 #>  8 Niger         has_children 0.794 0.404 0.00953  1.96 0.0187 #>  9 Niger         owns_animals 0.742 0.438 0.0103   1.96 0.0202 #> 10 Senegal       female_head  0.134 0.340 0.00681  1.96 0.0133 #> 11 Senegal       has_children 0.800 0.400 0.00800  1.96 0.0157 #> 12 Senegal       owns_animals 0.744 0.437 0.00873  1.96 0.0171"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_prep_ggcoefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Sahel Prepare data for sahel_ggcoefs() — sahel_prep_ggcoefs","title":"Sahel Prepare data for sahel_ggcoefs() — sahel_prep_ggcoefs","text":"function prepares coefficient information saved post regression workflow Stata makes ready plotting.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_prep_ggcoefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sahel Prepare data for sahel_ggcoefs() — sahel_prep_ggcoefs","text":"","code":"sahel_prep_ggcoefs(   data,   variables = c(\"consum_2_day_eq_ppp\", \"consum_2_day_ppp\", \"food_2_day_eq_ppp\",     \"food_2_day_ppp\", \"food_2_day_g_ppp\", \"food_2_day_g_eq_ppp\", \"food_2_g_d\",     \"FIES_rvrs_raw\"),   var_labels = c(\"Daily Cons.\\n Ad. Equiv.\", \"Daily Consumption\",     \"Daily Food Cons.\\n Ad. Equiv\", \"Daily Food Cons.\",     \"Gifted Daily Food\\n Cons. Ad. Equiv\", \"Gifted Daily\\n Food Cons.\",     \"Consumed Gifted\\n Food {0,1}\", \"Food Security\"),   model_number = 1 )"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_prep_ggcoefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sahel Prepare data for sahel_ggcoefs() — sahel_prep_ggcoefs","text":"data data frame filled regression output Stata. variables character vector variable names plot. var_labels chacater vector corresponding variable names. model_number dataframes mht_family variable indicating model type number. Select model want plot passing corresponding number.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_prep_ggcoefs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sahel Prepare data for sahel_ggcoefs() — sahel_prep_ggcoefs","text":"dataframe ready barchart plotting.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_prep_ggcoefs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sahel Prepare data for sahel_ggcoefs() — sahel_prep_ggcoefs","text":"","code":"# Don't forget to mount the data if using the actual data # prodregs <- #  haven::read_dta(r\"(U:\\fu2_MRT\\05_Regstats\\fu2_MRT_regstats_hh_prod.dta)\")  # Example with simulated data set.seed(1234) prodregs <- fabricatr::fabricate(N = 8,                                  var_name = c(\"consum_2_day_eq_ppp\",                                                \"consum_2_day_ppp\",                                                \"food_2_day_eq_ppp\",                                                \"food_2_day_ppp\",                                                \"food_2_day_g_ppp\",                                                \"food_2_day_g_eq_ppp\",                                                \"food_2_g_d\",                                                \"FIES_rvrs_raw\"),                                  b0 = 0,                                  b1 = rnorm(N, 0, 1),                                  b2 = rnorm(N, 0, 1),                                  b3 = rnorm(N, 0, 1),                                  avg0 = rnorm(N, 7, 1),                                  avg1 = rnorm(N, 8, 1),                                  avg2 = rnorm(N, 9, 1),                                  avg3 = rnorm(N, 10, 1),                                  se0 = rnorm(N, 0, 1),                                  se1 = rnorm(N, 0, 1),                                  se2 = rnorm(N, 0, 1),                                  se3 = rnorm(N, 0, 1),                                  ci95_0 = rnorm(N, 2, 1),                                  ci95_1 = rnorm(N, 2, 1),                                  ci95_2 = rnorm(N, 2, 1),                                  ci95_3 = rnorm(N, 2, 1),                                  p0 = rnorm(N, 0.8, 0.5),                                  p1 = rnorm(N, 0.8, 0.5),                                  p2 = rnorm(N, 0.8, 0.5),                                  p3 = rnorm(N, 0.8, 0.5),                                  mht_family = 1) |>   dplyr::select(-ID)   sahel_prep_ggcoefs(prodregs) #> # A tibble: 32 × 7 #>    var_name           mht_family Variable.x Value.x Treatment Variable.y Value.y #>    <fct>                   <dbl> <chr>        <dbl> <fct>     <chr>        <dbl> #>  1 \"Daily Cons.\\n Ad…          1 ci95_0      NA     Control   avg0          6.31 #>  2 \"Daily Cons.\\n Ad…          1 ci95_1       0.865 Psychoso… avg1          7.29 #>  3 \"Daily Cons.\\n Ad…          1 ci95_2       1.17  Cash      avg2         10.4  #>  4 \"Daily Cons.\\n Ad…          1 ci95_3       0.890 Full      avg3          9.48 #>  5 \"Daily Consumptio…          1 ci95_0      NA     Control   avg0          5.55 #>  6 \"Daily Consumptio…          1 ci95_1       2.88  Psychoso… avg1          7.50 #>  7 \"Daily Consumptio…          1 ci95_2       2.17  Cash      avg2          7.93 #>  8 \"Daily Consumptio…          1 ci95_3       2.85  Full      avg3          9.50 #>  9 \"Daily Food Cons.…          1 ci95_0      NA     Control   avg0          7.57 #> 10 \"Daily Food Cons.…          1 ci95_1       2.97  Psychoso… avg1          6.37 #> # ℹ 22 more rows"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"sahel_sim dataset — sahel_sim","title":"sahel_sim dataset — sahel_sim","text":"simulated data examples package","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sahel_sim dataset — sahel_sim","text":"","code":"sahel_sim"},{"path":"https://bbieri.github.io/SahelGraphR/reference/sahel_sim.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"sahel_sim dataset — sahel_sim","text":"object class data.frame 7800 rows 17 columns.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/themeaspdark.html","id":null,"dir":"Reference","previous_headings":"","what":"Dark theme for {ggplot2} graphs. Inspired by the excellent\n{hrbrthemes} package. — themeaspdark","title":"Dark theme for {ggplot2} graphs. Inspired by the excellent\n{hrbrthemes} package. — themeaspdark","text":"Dark theme {ggplot2} graphs. Inspired excellent {hrbrthemes} package.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/themeaspdark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dark theme for {ggplot2} graphs. Inspired by the excellent\n{hrbrthemes} package. — themeaspdark","text":"","code":"themeaspdark(...)"},{"path":"https://bbieri.github.io/SahelGraphR/reference/themeaspdark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dark theme for {ggplot2} graphs. Inspired by the excellent\n{hrbrthemes} package. — themeaspdark","text":"... Additional arguments passed ggplot2::theme()","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/themeaspdark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dark theme for {ggplot2} graphs. Inspired by the excellent\n{hrbrthemes} package. — themeaspdark","text":"Theme ggplot graphs accordance Bernie's blog colors.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/themeaspdark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dark theme for {ggplot2} graphs. Inspired by the excellent\n{hrbrthemes} package. — themeaspdark","text":"","code":"# \\donttest{  library(ggplot2)  # Prepare data  cty_mpg <- aggregate(mpg$cty, by=list(mpg$manufacturer), FUN=mean)  # aggregate  colnames(cty_mpg) <- c(\"make\", \"mileage\")  # change column names  cty_mpg <- cty_mpg[order(cty_mpg$mileage), ]  # sort  cty_mpg$make <- factor(cty_mpg$make, levels = cty_mpg$make)  # Plot  ggplot(cty_mpg, aes(x=make, y=mileage)) +    geom_segment(aes(x=make,                     xend=make,                     y=0,                     yend=mileage), color = \"white\") +    geom_point(size=3, color = SahelGraphR::asp_palettes$Dark[[\"yellow-full\"]]) +    labs(title=\"Lollipop Chart\",         subtitle=\"Make Vs Avg. Mileage\",         caption=\"source: mpg\") +    SahelGraphR::themeaspdark() +    theme(axis.text.x = element_text(angle=65, vjust=0.6))   # }"},{"path":"https://bbieri.github.io/SahelGraphR/reference/themeasplight.html","id":null,"dir":"Reference","previous_headings":"","what":"Light theme for {ggplot2} graphs — themeasplight","title":"Light theme for {ggplot2} graphs — themeasplight","text":"Light theme {ggplot2} graphs","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/themeasplight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Light theme for {ggplot2} graphs — themeasplight","text":"","code":"themeasplight(...)"},{"path":"https://bbieri.github.io/SahelGraphR/reference/themeasplight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Light theme for {ggplot2} graphs — themeasplight","text":"... Additional arguments passed ggplot2::theme()","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/themeasplight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Light theme for {ggplot2} graphs — themeasplight","text":"Theme ggplot graphs inspired coal paper excellent {hrbrthemes} package.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/reference/themeasplight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Light theme for {ggplot2} graphs — themeasplight","text":"","code":"# \\donttest{  library(ggplot2)  # Prepare data  cty_mpg <- aggregate(mpg$cty, by=list(mpg$manufacturer), FUN=mean)  # aggregate  colnames(cty_mpg) <- c(\"make\", \"mileage\")  # change column names  cty_mpg <- cty_mpg[order(cty_mpg$mileage), ]  # sort  cty_mpg$make <- factor(cty_mpg$make, levels = cty_mpg$make)  # Plot  ggplot(cty_mpg, aes(x = make, y = mileage)) +    geom_segment(aes(x = make,                     xend = make,                     y = 0,                     yend = mileage), color = \"#C3CED6\") +    geom_point(size=3, color = \"#C3CED6\") +    labs(title = \"Lollipop Chart\",         subtitle = \"Make Vs Avg. Mileage\",         caption = \"source: mpg\") +    SahelGraphR::themeaspdark() +    theme(axis.text.x = element_text(angle = 65, vjust = 0.6))   # }"},{"path":"https://bbieri.github.io/SahelGraphR/news/index.html","id":"sahelgraphr-010","dir":"Changelog","previous_headings":"","what":"SahelGraphR 0.1.0","title":"SahelGraphR 0.1.0","text":"Updated ggplot2 theme project. Created distribution graph functions. Created coefficient graph functions. Updated color palette include country colors. Added map-making functions.","code":""},{"path":"https://bbieri.github.io/SahelGraphR/news/index.html","id":"sahelgraphr-0009000","dir":"Changelog","previous_headings":"","what":"SahelGraphR 0.0.0.9000","title":"SahelGraphR 0.0.0.9000","text":"Initialized package. Added NEWS.md file track changes package. Added ASP color palettes continuous color generator. Added ASP ggplot2 themes light dark graphs.","code":""}]
